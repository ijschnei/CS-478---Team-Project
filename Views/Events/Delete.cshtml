@model CS478_EventPlannerProject.Models.Events
@{
    ViewData["Title"] = "Delete Event";
}

<link rel="stylesheet" href="~/css/events.css" />

<div class="container mt-4">
    <div class="alert alert-danger">
        <h4 class="alert-heading">
            <i class="bi bi-exclamation-triangle"></i> Delete Event
        </h4>
        <p>Are you sure you want to delete this event? This action cannot be undone.</p>
    </div>

    <div class="card">
        <div class="card-header bg-dark text-white">
            <h3 class="mb-0">@Model.EventName</h3>
        </div>
        <div class="card-body">
            @if (!string.IsNullOrEmpty(Model.BannerImageUrl))
            {
                <img src="@Model.BannerImageUrl" class="img-fluid mb-3" alt="@Model.EventName" style="max-height: 200px; object-fit: cover;">
            }

            <dl class="row">
                <dt class="col-sm-3">Event Name</dt>
                <dd class="col-sm-9">@Model.EventName</dd>

                @if (!string.IsNullOrEmpty(Model.EventDescription))
                {
                    <dt class="col-sm-3">Description</dt>
                    <dd class="col-sm-9">@Model.EventDescription</dd>
                }

                <dt class="col-sm-3">Start Date & Time</dt>
                <dd class="col-sm-9">
                    @Model.StartDateTime.ToString("dddd, MMMM dd, yyyy h:mm tt")
                    @if (Model.IsAllDay)
                    {
                        <span class="badge bg-info">All Day</span>
                    }
                </dd>

                @if (Model.EndDateTime.HasValue)
                {
                    <dt class="col-sm-3">End Date & Time</dt>
                    <dd class="col-sm-9">@Model.EndDateTime.Value.ToString("dddd, MMMM dd, yyyy h:mm tt")</dd>
                }

                <dt class="col-sm-3">Location</dt>
                <dd class="col-sm-9">
                    @if (Model.IsVirtual)
                    {
                        <span class="badge bg-primary">Virtual Event</span>
                        @if (!string.IsNullOrEmpty(Model.VirtualMeetingUrl))
                        {
                            <br />
                            <small>@Model.VirtualMeetingUrl</small>
                        }
                    }
                    else
                    {
                        @if (!string.IsNullOrEmpty(Model.VenueName))
                        {
                            <strong>@Model.VenueName</strong>
                    
                            <br />
                        }
                        @if (!string.IsNullOrEmpty(Model.Address))
                        {
                            @Model.Address
                    
                            <br />
                        }
                        @if (!string.IsNullOrEmpty(Model.City) || !string.IsNullOrEmpty(Model.State))
                        {
                            @Model.City
                            @(!string.IsNullOrEmpty(Model.City) && !string.IsNullOrEmpty(Model.State) ? ", " : "")
                            @Model.State @Model.PostalCode
                        }
                    }
                </dd>

                @if (Model.MaxAttendees.HasValue)
                {
                    <dt class="col-sm-3">Max Attendees</dt>
                    <dd class="col-sm-9">@Model.MaxAttendees</dd>
                }

                @if (Model.Attendees != null && Model.Attendees.Any())
                {
                    <dt class="col-sm-3">Current Attendees</dt>
                    <dd class="col-sm-9">
                        <span class="badge bg-warning text-dark">@Model.Attendees.Count registered</span>
                    </dd>
                }

                @if (Model.IsPrivate)
                {
                    <dt class="col-sm-3">Privacy</dt>
                    <dd class="col-sm-9">
                        <span class="badge bg-secondary">Private Event</span>
                    </dd>
                }

                @if (Model.RequiresApproval)
                {
                    <dt class="col-sm-3">Registration</dt>
                    <dd class="col-sm-9">
                        <span class="badge bg-info">Requires Approval</span>
                    </dd>
                }
            </dl>

            @if (Model.Attendees != null && Model.Attendees.Any())
            {
                <div class="alert alert-warning">
                    <strong>Warning:</strong> This event has @Model.Attendees.Count registered attendee(s).
                    Deleting this event will remove all registrations and may impact attendees.
                </div>
            }

            <hr />

            <form asp-action="Delete" asp-route-id="@Model.EventId" method="post">
                @Html.AntiForgeryToken()

                <div class="d-flex justify-content-between align-items-center">
                    <a asp-action="Details" asp-route-id="@Model.EventId" class="btn btn-secondary">
                        <i class="bi bi-arrow-left"></i> Cancel
                    </a>
                    <button type="submit" class="btn btn-danger btn-lg">
                        <i class="bi bi-trash"></i> Yes, Delete This Event
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Add confirmation dialog for extra safety
        document.querySelector('form').addEventListener('submit', function(e) {
            if (!confirm('Are you absolutely sure you want to delete this event? This cannot be undone.')) {
                e.preventDefault();
            }
        });
    </script>
}