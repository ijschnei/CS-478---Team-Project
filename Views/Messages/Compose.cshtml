@model CS478_EventPlannerProject.ViewModels.ComposeMessageViewModel
@{
	ViewData["Title"] = "Compose Message";
}

<div class="container mt-4">
	<div class="row justify-content-center">
		<div class="col-md-8">
			<div class="card">
				<div class="card-header">
					<h4>
						<i class="bi bi-envelope-plus"></i> Compose New Message
					</h4>
				</div>
				<div class="card-body">
					<a asp-action="Index" class="btn btn-sm btn-outline-secondary mb-3">
						<i class="bi bi-arrow-left"></i> Back to Messages
					</a>
					@if (TempData["Error"] != null)
					{
						<div class="alert alert-danger alert-dismissible fade show" role="alert">
							@TempData["Error"]
							<button type="button" class="btn-close" data-bs-dismiss="alert"></button>
						</div>
					}
					<form asp-action="Compose" method="post">
						<div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>
						@if (!string.IsNullOrEmpty(Model.ReceiverName))
						{
							<!--show receiver name when preselected-->
							<div class="mb-3">
								<label class="form-label">To</label>
								<input type="text" class="form-control" value="@Model.ReceiverName" disabled />
								<input type="hidden" asp-for="ReceiverId" />
							</div>
						}
						else
						{
							<!--Receiver selection with autocomplete search-->
							<div class="mb-3">
								<label for="recipientSearch" class="form-label">
									To<span class="text-danger">*</span>
								</label>
								<input type="text" id="recipientSearch" class="form-control" placeholder="Search for recipient by name..." autocomplete="=off" />
								<input type="hidden" asp-for="ReceiverId" id="receiverIdField" />
								<span asp-validation-for="ReceiverId" class="text-danger"></span>
								<!--Selected recipient display-->
								<div id="selectedRecipient" class="mt-2" style="display:none;">
									<div class="alert alert-success d-flex justify-content-between align-items-center">
										<span>
											<i class="bi bi-person-check"></i>
											<strong>Selected: </strong>
											<span id="selectedRecipientName"></span>
										</span>
										<button type="button" class="btn btn-sm btn-outline-danger" onclick="clearRecipient()">
											<i class="bi bi-x"></i>Clear
										</button>
									</div>
								</div>
								<!--Search results dropdown-->
								<div id="searchResults" class="list-group mt-1" style="display:none;position:absolute;z-index:1000;max-height:300px;overflow-y:auto;width:calc(100% - 30px);"></div>
								<small class="form-text text-muted">Start typing to search for users by name</small>
							</div>
							<!--Receiver selection (need to add user search here as well)-->
						//	<div class="mb-3">
						//		<label asp-for="ReceiverId" class="form-label">Recipient User ID</label>
						//		<input asp-for="ReceiverId" class="form-control" placeholder="Enter recipient user ID" />
						//		<span asp-validation-for="ReceiverId" class="text-danger"></span>
						//		<small class="form-text text-muted">
						//			Note: You'll typically access this page with a pre-selected recipient.'
						//		</small>
						//	</div>
						}
						@if (Model.RelatedEventId.HasValue && !string.IsNullOrEmpty(Model.EventName))
						{
							<div class="alert alert-info">
								<i class="bi bi-calendar-event"></i>
								<strong>Event Related:</strong> @Model.EventName
							</div>
							<input type="hidden" asp-for="RelatedEventId" />
							<input type="hidden" asp-for="MessageType" value="event_related" />
						}
						else
						{
							<input type="hidden" asp-for="MessageType" value="direct" />
						}
						<div class="mb-3">
							<label asp-for="Subject" class="form-label">Subject (Optional)</label>
							<input asp-for="Subject" class="form-control" placeholder="Enter message subject" />
							<span asp-validation-for="Subject" class="text-danger"></span>
						</div>
						<div class="mb-3">
							<label asp-for="Content" class="form-label">Message <span class="text-danger">*</span></label>
							<textarea asp-for="Content" class="form-control" rows="8" placeholder="Type your message here..." required></textarea>
							<span asp-validation-for="Content" class="text-danger"></span>
						</div>
						<div class="d-flex justify-content-between">
							<a asp-action="Index" class="btn btn-secondary">Cancel</a>
							<button type="submit" class="btn btn-primary">
								<i class="bi bi-send"></i> Send Message
							</button>
						</div>
					</form>
				</div>
			</div>
			<!--Help card-->
			<div class="card mt-3">
				<div class="card-body bg-light">
					<h6 class="card-title">
						<i class="bi bi-info-circle"></i> Tips for Messaging
					</h6>
					<ul class="mb-0 small">
						<li>Keep your messages clear and concise</li>
						<li>Use the subject line to summarize your message</li>
						<li>Event-related messages are linked to specific events for easy reference</li>
						<li>All participants will be notified of new messages</li>
					</ul>
				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts{
	@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

	<script>
		//User search functionality
		const searchInput = document.getElementById('recipientSearch');
		const searchResults = document.getElementById('searchResults');
		const receiverIdField = document.getElementById('receiverIdField');
		const selectedRecipientDiv = document.getElementById('selectedRecipient');
		const selectedRecipientName = document.getElementById('selectedRecipientName');
		let searchTimeout;

		if(searchInput){
			searchInput.addEventListener('input', function(){
				const searchTerm = this.value.trim();

				clearTimeout(searchTimeout);

				if(searchTerm.length < 2){
					searchResults.style.display = 'none';
					return;
				}

				//debounce search
				searchTimeout = setTimeout(() => {
					searchUsers(searchTerm);
				}, 300);
				});

			//close search results when clicking outside
			document.addEventListener('click', function(e){
				if(!searchResults.contains(e.target) && e.target !== searchInput){
					searchResults.style.display = 'none';
				}
			});
		}

		function searchUsers(searchTerm){
			//make AJAX call to search endpoint
			fetch(`/UserProfiles/SearchApi?searchTerm=${encodeURIComponent(searchTerm)}`)
				.then(response=>response.json())
				.then(data => {
					displaySearchResults(data);
				})
				.catch(error=>{
					console.error('Error searching users:', error);
					searchResults.innerHTML = '<div class="list-group-item text-danger">Error loading results</div>';
					searchResults.style.display = 'block';
				});
		}
		function displaySearchResults(users){
			if(!users || users.length == 0){
				searchResults.innerHTML = '<div class="list-group-item">No users found</div>';
				searchResults.style.display='block';
				return;
			}
			searchResults.innerHTML = '';
			users.forEach(user => {
				const button = document.createElement('button');
				button.type = 'button';
				button.className = 'list-group-item list-group-item-action';
				button.onclick = function(){
					selectRecipient(user.userId, user.fullName, user.displayName || '');
				};
				let innerHtml = '<div class="d-flex justify-content-between align-items-center"><div>';
				innerHtml += '<strong>' + escapeHtml(user.fullName) + '</strong>';
				if(user.displayName){
					innerHtml += '<br><small class="text-muted">@@' + escapeHtml(user.displayName) + '</small>';
				}
				innerHtml += '</div><i class="bi bi-chevron-right"></i></div>';
				button.innerHTML = innerHtml;
				searchResults.appendChild(button);
			});
			searchResults.style.display = 'block';
		}
		function selectRecipient(userId, fullName, displayName){
			receiverIdField.value = userId;
			selectedRecipientName.textContent = displayName ? fullName + ' (@@' + displayName + ')' : fullName;
			selectedRecipientDiv.style.display = 'block';
			searchInput.value = '';
			searchInput.disabled = true;
			searchResults.style.display = 'none';
		}
		function clearRecipient(){
			receiverIdField.value = '';
			selectedRecipientDiv.style.display = 'none';
			searchInput.disabled = false;
			searchInput.focus();
		}

		function escapeHtml(text){
			const div = document.createElement('div');
			div.textContent = text;
			return div.innerHTML;
		}

		//character counter for message content
		const contentTextarea = document.querySelector('textarea[name="Content"]');
		if (contentTextarea){
			const counterDiv = document.createElement('div');
			counterDiv.className = 'text-muted small mt-1';
			contentTextarea.parentElement.appendChild(counterDiv);

			function updateCounter(){
				const length = contentTextarea.value.length;
				counterDiv.textContent = `${length} characters`;
			}
			contentTextarea.addEventListener('input', updateCounter);
			updateCounter();
		}
	</script>
}
